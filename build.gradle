plugins {
    id 'groovy'
    id 'application'
    id 'org.javamodularity.moduleplugin'    version '1.8.10'
    id 'org.openjfx.javafxplugin'           version '0.0.12'
    id 'org.beryx.jlink'                    version '2.24.4'
    id 'com.gluonhq.gluonfx-gradle-plugin'  version '1.0.12'
}

def appName = 'SupernautFX Hello'
version = helloAppVersion
mainClassName = 'app.supernaut.fx.sample.gradle.HelloFX'

application {
    mainModule = 'hellofx'
    mainClass = mainClassName
}

repositories {
    mavenCentral()
    maven { url 'https://gitlab.com/api/v4/projects/26584840/packages/maven' /* gitlab-supernaut-maven */ }
}

dependencies {
    implementation "app.supernaut:app.supernaut.fx:${supernautVersion}"             // Supernaut.FX and FxLauncher API
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"                            // Logging API

    implementation "jakarta.inject:jakarta.inject-api"                              // For @Singleton annotation, etc.
    implementation "io.micronaut:micronaut-inject"                                  // For Micronaut annotations (eg. @Factory) and generated code

    annotationProcessor "io.micronaut:micronaut-inject-java:${micronautVersion}"    // Micronaut annotation processor generates code

    runtimeOnly "app.supernaut:app.supernaut.fx.micronaut:${supernautVersion}"      // Micronaut-based implementation of FxLauncher
    runtimeOnly "org.slf4j:slf4j-jdk14:${slf4jVersion}"                             // Implementation of slf4j-api

    constraints {
        implementation("io.micronaut:micronaut-inject:${micronautVersion}") {
            because 'We want the `micronautVersion` setting in `gradle.properties` to allow overriding the transitive version from `app.supernaut.fx.micronaut`'
        }
    }

    testImplementation "org.spockframework:spock-core:${spockVersion}"              // We are planning on adding some sample Spock tests in the future
    testRuntimeOnly "net.bytebuddy:byte-buddy:1.11.20"                              // allows Spock to mock classes (in addition to interfaces)
    testRuntimeOnly "org.objenesis:objenesis:3.2"                                   // Allow Spock to mock classes with constructor arguments
}

configurations.all {
    exclude group: 'javax.annotation', module: "javax.annotation-api"
    exclude group: 'org.yaml', module: "snakeyaml"
}

javafx {
    version = javaFxVersion
    modules = ['javafx.graphics', 'javafx.controls', 'javafx.fxml']
}

modularity.disableEffectiveArgumentsAdjustment()

compileJava {
    options.release = 11
    options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
}

test {
    useJUnitPlatform()          // We're using Spock 2.0 and JUnit 5
    moduleOptions {
        runOnClasspath = true
    }
}

run {
    moduleOptions {
        addModules = ['app.supernaut.fx.micronaut']
    }
}

def os = org.gradle.internal.os.OperatingSystem.current()

jlink {
    addExtraDependencies("javafx")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--add-modules', 'app.supernaut.fx.micronaut,org.slf4j.jul']
    launcher {
        name = appName
        jvmArgs = []
    }
    mergedModule {
        requires 'org.slf4j'
        requires 'jakarta.inject'
        requires 'jakarta.annotation'

        uses 'io.micronaut.core.optim.StaticOptimizations.Loader'
    }
    jpackage {
        skipInstaller = false

        // Which installers to make
        if (os.linux) {
            installerType = null            // default is ['rpm', 'deb']
        } else if (os.macOsX) {
            installerType = 'dmg'           // default is ['pkg', 'dmg']
        } else if (os.windows) {
            installerType = 'exe'           // default is ['exe', 'msi']
        }

        def appVersionForJpackage = version  // Be careful here, some version strings won't work with all installers

        imageOptions = ["--verbose", "--app-version", appVersionForJpackage]
        installerOptions = ["--app-version", appVersionForJpackage]
        if (os.macOsX) {
            // No resource-dir for now // imageOptions += [ '--resource-dir', "${projectDir}/src/macos/resource-dir" ]
            if (signMacOS.toBoolean()) {
                logger.warn "Setting --mac-sign in jpackage imageOptions"
                imageOptions += [ '--mac-sign' ]
            }
        } else if (os.windows) {
            installerOptions += ['--win-dir-chooser', '--win-menu', '--win-shortcut']
        }

    }
}
